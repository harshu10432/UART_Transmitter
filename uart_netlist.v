/* Generated by Yosys 0.34 (git sha1 4a1b5599258, clang 14.0.0 -fPIC -Os) */

(* src = "uart.v:1.1-40.10" *)
module uart(clk, reset, data_in, start, stop, tx);
  (* src = "uart.v:14.3-38.6" *)
  wire [3:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  (* force_downto = 32'd1 *)
  (* src = "uart.v:35.24-35.37|/usr/local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [10:0] _064_;
  (* force_downto = 32'd1 *)
  (* src = "uart.v:35.24-35.37|/usr/local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [10:0] _065_;
  (* force_downto = 32'd1 *)
  (* src = "uart.v:0.0-0.0|/usr/local/bin/../share/yosys/techmap.v:137.23-137.24" *)
  wire _066_;
  (* src = "uart.v:12.14-12.23" *)
  reg [10:0] bit_count;
  (* src = "uart.v:2.14-2.17" *)
  input clk;
  wire clk;
  (* src = "uart.v:10.13-10.18" *)
  reg [3:0] count;
  (* src = "uart.v:4.20-4.27" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "uart.v:3.14-3.19" *)
  input reset;
  wire reset;
  wire [8:0] shift_reg;
  (* src = "uart.v:5.14-5.19" *)
  input start;
  wire start;
  (* src = "uart.v:6.14-6.18" *)
  input stop;
  wire stop;
  (* src = "uart.v:7.14-7.16" *)
  output tx;
  reg tx;
  assign _003_ = start & ~(reset);
  assign _023_ = ~start;
  assign _024_ = ~(count[1] | count[0]);
  assign _025_ = count[2] | count[3];
  assign _026_ = _024_ & ~(_025_);
  assign _001_ = ~(_026_ & _023_);
  assign _027_ = _001_ & ~(reset);
  assign _028_ = _023_ & ~(_026_);
  assign _029_ = count[2] | ~(count[3]);
  assign _030_ = _024_ & ~(_029_);
  assign _031_ = _028_ & ~(_030_);
  assign _002_ = _027_ & ~(_031_);
  assign _032_ = _026_ | reset;
  assign _004_ = _023_ & ~(_032_);
  assign _033_ = ~(_030_ | count[0]);
  assign _000_[0] = _033_ | start;
  assign _034_ = ~(count[1] ^ count[0]);
  assign _000_[1] = _023_ & ~(_034_);
  assign _035_ = ~(count[1] & count[0]);
  assign _036_ = _035_ ^ count[2];
  assign _037_ = _036_ | _030_;
  assign _000_[2] = _023_ & ~(_037_);
  assign _038_ = _035_ | ~(count[2]);
  assign _039_ = _038_ ^ count[3];
  assign _040_ = _039_ | _030_;
  assign _000_[3] = _023_ & ~(_040_);
  assign _041_ = ~bit_count[2];
  assign _042_ = shift_reg[1] | ~(bit_count[0]);
  assign _043_ = bit_count[0] ? shift_reg[3] : shift_reg[2];
  assign _044_ = bit_count[1] ? _043_ : _042_;
  assign _045_ = bit_count[0] ? shift_reg[5] : shift_reg[4];
  assign _046_ = bit_count[0] ? shift_reg[7] : shift_reg[6];
  assign _047_ = bit_count[1] ? _046_ : _045_;
  assign _048_ = bit_count[2] ? _047_ : _044_;
  assign _049_ = bit_count[0] | ~(shift_reg[8]);
  assign _050_ = _049_ | bit_count[1];
  assign _051_ = _041_ & ~(_050_);
  assign _066_ = bit_count[3] ? _051_ : _048_;
  assign _064_[0] = ~bit_count[0];
  assign _052_ = bit_count[9] | bit_count[8];
  assign _053_ = bit_count[7] | bit_count[6];
  assign _054_ = _053_ | _052_;
  assign _055_ = bit_count[5] | bit_count[4];
  assign _056_ = bit_count[3] & bit_count[2];
  assign _057_ = _056_ | _055_;
  assign _058_ = _057_ | _054_;
  assign _059_ = _058_ | bit_count[10];
  assign _060_ = bit_count[3] & ~(bit_count[2]);
  assign _061_ = ~(bit_count[1] & bit_count[0]);
  assign _062_ = _060_ & ~(_061_);
  assign _063_ = _055_ | _053_;
  assign _006_ = _062_ & ~(_063_);
  assign _007_ = _052_ | bit_count[10];
  assign _008_ = _006_ & ~(_007_);
  assign _005_ = _008_ | _059_;
  assign _065_[1] = bit_count[1] ^ bit_count[0];
  assign _065_[2] = _061_ ^ _041_;
  assign _009_ = bit_count[2] & ~(_061_);
  assign _065_[3] = _009_ ^ bit_count[3];
  assign _010_ = ~(bit_count[3] & bit_count[2]);
  assign _011_ = ~(_010_ | _061_);
  assign _065_[4] = _011_ ^ bit_count[4];
  assign _012_ = _010_ | _061_;
  assign _013_ = bit_count[4] & ~(_012_);
  assign _065_[5] = _013_ ^ bit_count[5];
  assign _014_ = ~(bit_count[5] & bit_count[4]);
  assign _015_ = _014_ | _012_;
  assign _065_[6] = ~(_015_ ^ bit_count[6]);
  assign _016_ = bit_count[6] & ~(_015_);
  assign _065_[7] = _016_ ^ bit_count[7];
  assign _017_ = ~(bit_count[7] & bit_count[6]);
  assign _018_ = _017_ | _014_;
  assign _019_ = _011_ & ~(_018_);
  assign _065_[8] = _019_ ^ bit_count[8];
  assign _020_ = _019_ & bit_count[8];
  assign _065_[9] = _020_ ^ bit_count[9];
  assign _021_ = ~(bit_count[9] & bit_count[8]);
  assign _022_ = _019_ & ~(_021_);
  assign _065_[10] = _022_ ^ bit_count[10];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_004_)
      if (_005_) tx <= 1'h1;
      else tx <= _066_;
  reg \shift_reg_reg[1] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[1]  <= data_in[0];
  assign shift_reg[1] = \shift_reg_reg[1] ;
  reg \shift_reg_reg[2] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[2]  <= data_in[1];
  assign shift_reg[2] = \shift_reg_reg[2] ;
  reg \shift_reg_reg[3] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[3]  <= data_in[2];
  assign shift_reg[3] = \shift_reg_reg[3] ;
  reg \shift_reg_reg[4] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[4]  <= data_in[3];
  assign shift_reg[4] = \shift_reg_reg[4] ;
  reg \shift_reg_reg[5] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[5]  <= data_in[4];
  assign shift_reg[5] = \shift_reg_reg[5] ;
  reg \shift_reg_reg[6] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[6]  <= data_in[5];
  assign shift_reg[6] = \shift_reg_reg[6] ;
  reg \shift_reg_reg[7] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[7]  <= data_in[6];
  assign shift_reg[7] = \shift_reg_reg[7] ;
  reg \shift_reg_reg[8] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_003_) \shift_reg_reg[8]  <= data_in[7];
  assign shift_reg[8] = \shift_reg_reg[8] ;
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk, posedge reset)
    if (reset) count[0] <= 1'h0;
    else if (_001_) count[0] <= _000_[0];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk, posedge reset)
    if (reset) count[1] <= 1'h0;
    else if (_001_) count[1] <= _000_[1];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk, posedge reset)
    if (reset) count[2] <= 1'h0;
    else if (_001_) count[2] <= _000_[2];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk, posedge reset)
    if (reset) count[3] <= 1'h0;
    else if (_001_) count[3] <= _000_[3];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[0] <= 1'h0;
      else bit_count[0] <= _064_[0];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[1] <= 1'h0;
      else bit_count[1] <= _065_[1];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[2] <= 1'h0;
      else bit_count[2] <= _065_[2];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[3] <= 1'h0;
      else bit_count[3] <= _065_[3];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[4] <= 1'h0;
      else bit_count[4] <= _065_[4];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[5] <= 1'h0;
      else bit_count[5] <= _065_[5];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[6] <= 1'h0;
      else bit_count[6] <= _065_[6];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[7] <= 1'h0;
      else bit_count[7] <= _065_[7];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[8] <= 1'h0;
      else bit_count[8] <= _065_[8];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[9] <= 1'h0;
      else bit_count[9] <= _065_[9];
  (* src = "uart.v:14.3-38.6" *)
  always @(posedge clk)
    if (_002_)
      if (start) bit_count[10] <= 1'h0;
      else bit_count[10] <= _065_[10];
  assign _064_[10:1] = bit_count[10:1];
  assign _065_[0] = _064_[0];
  assign shift_reg[0] = 1'h1;
endmodule
